{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b0a8a40e",
   "metadata": {},
   "source": [
    "# Implementation of Bor≈Øvka's minimum spanning tree algorithm\n",
    "\n",
    "Its aim is to create a graph in which all nodes are connected in such a way that there exist no cycles and the sum of all edge weights is minimum possible total edge weight."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c5292bd",
   "metadata": {},
   "source": [
    "## Input presentation: nodes and edges initialisation\n",
    "The graph is undirected and each possible edge must have an assigned weight."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a9c2135",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mDEPRECATION: Configuring installation scheme with distutils config files is deprecated and will no longer work in the near future. If you are using a Homebrew or Linuxbrew Python, please see discussion at https://github.com/Homebrew/homebrew-core/issues/76621\u001b[0m\u001b[33m\n",
      "\u001b[0mRequirement already satisfied: graphviz in /opt/homebrew/lib/python3.9/site-packages (0.20.1)\n",
      "\u001b[33mDEPRECATION: Configuring installation scheme with distutils config files is deprecated and will no longer work in the near future. If you are using a Homebrew or Linuxbrew Python, please see discussion at https://github.com/Homebrew/homebrew-core/issues/76621\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: You are using pip version 22.0.4; however, version 22.3.1 is available.\n",
      "You should consider upgrading via the '/opt/homebrew/opt/python@3.9/bin/python3.9 -m pip install --upgrade pip' command.\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip3 install graphviz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24a5de59",
   "metadata": {},
   "source": [
    "**If there are still issues with the graphviz library:** please install globally as described here: https://graphviz.org/download/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "582c247b",
   "metadata": {},
   "source": [
    "### Data structure representation\n",
    "First, create a structure to store graph information and allow to visualise it using graphviz library. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "98cb4188",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import graphviz \n",
    "import random\n",
    "from collections import defaultdict\n",
    "import pprint\n",
    "\n",
    "# undirected graph\n",
    "class Graph(object):\n",
    "\n",
    "    def __init__(self, connections):\n",
    "        self._graph = defaultdict(set)\n",
    "        self.edges = []\n",
    "        self.visual = graphviz.Graph('graph')\n",
    "\n",
    "    def add_edge(self, node1, node2, weight):\n",
    "        # Add connection between node1 and node2\n",
    "        self._graph[node1].add((node2, weight))\n",
    "        self._graph[node2].add((node1, weight))\n",
    "        self.visual.node(str(node1))\n",
    "        self.visual.node(str(node2))\n",
    "        self.visual.edge(str(node1), str(node2), label = str(weight))\n",
    "        self.edges.append((node1, node2, weight))\n",
    "        \n",
    "    def get_number_of_nodes(self):\n",
    "        return len(self._graph)\n",
    "    \n",
    "    def get_nodes(self):\n",
    "        return self._graph.keys()\n",
    "    \n",
    "    def get_edges_for_node(self, node):\n",
    "        return self._graph[node]\n",
    "    \n",
    "    def get_edges(self):\n",
    "        return self.edges\n",
    "\n",
    "    def __str__(self):\n",
    "        return '{}({})'.format(self.__class__.__name__, dict(self._graph))\n",
    "    \n",
    "    def draw(self):\n",
    "        return self.visual\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9f05c941",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph({0: {(6, 7), (4, 16), (1, 4)}, 1: {(0, 4), (7, 20), (6, 11), (8, 10), (2, 9)}, 6: {(0, 7), (1, 11), (7, 100), (9, 5), (4, 8)}, 7: {(4, 3), (7, 0), (1, 20), (8, 3), (6, 100)}, 2: {(9, 2), (1, 9), (4, 2), (3, 6)}, 3: {(4, 10), (5, 100), (2, 6)}, 4: {(5, 15), (0, 16), (6, 8), (3, 10), (7, 3), (2, 2), (8, 5)}, 5: {(4, 15), (3, 100), (8, 12)}, 8: {(4, 5), (5, 12), (1, 10), (7, 3)}, 9: {(6, 5), (2, 2)}})\n"
     ]
    }
   ],
   "source": [
    "# store an example graph in a data structure (can also be randomly generated)\n",
    "\n",
    "g = Graph([])\n",
    "\n",
    "g.add_edge(0, 1, 4)\n",
    "g.add_edge(0, 6, 7)\n",
    "g.add_edge(1, 6, 11)\n",
    "g.add_edge(1, 7, 20)\n",
    "g.add_edge(1, 2, 9)\n",
    "g.add_edge(2, 3, 6)\n",
    "g.add_edge(2, 4, 2)\n",
    "g.add_edge(3, 4, 10)\n",
    "g.add_edge(3, 5, 100)\n",
    "g.add_edge(4, 5, 15)\n",
    "g.add_edge(4, 0, 16)\n",
    "g.add_edge(4, 7, 3)\n",
    "g.add_edge(4, 6, 8)\n",
    "g.add_edge(4, 8, 5)\n",
    "g.add_edge(5, 8, 12)\n",
    "g.add_edge(6, 7, 100)\n",
    "g.add_edge(7, 8, 3)\n",
    "g.add_edge(7,7,0)\n",
    "g.add_edge(1, 8, 10)\n",
    "g.add_edge(9, 2, 2)\n",
    "g.add_edge(9, 6, 5)\n",
    "\n",
    "\n",
    "print(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9469eb1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 3.0.0 (20220226.1711)\n",
       " -->\n",
       "<!-- Title: graph Pages: 1 -->\n",
       "<svg width=\"352pt\" height=\"653pt\"\n",
       " viewBox=\"0.00 0.00 352.00 653.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 649)\">\n",
       "<title>graph</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-649 348,-649 348,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"295\" cy=\"-627\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"295\" y=\"-623.3\" font-family=\"Times,serif\" font-size=\"14.00\">0</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"148\" cy=\"-540\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"148\" y=\"-536.3\" font-family=\"Times,serif\" font-size=\"14.00\">1</text>\n",
       "</g>\n",
       "<!-- 0&#45;&#45;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&#45;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M275.17,-614.54C247.12,-598.31 196.12,-568.82 167.98,-552.55\"/>\n",
       "<text text-anchor=\"middle\" x=\"234.5\" y=\"-579.8\" font-family=\"Times,serif\" font-size=\"14.00\">4</text>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>6</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"253\" cy=\"-192\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"253\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">6</text>\n",
       "</g>\n",
       "<!-- 0&#45;&#45;6 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>0&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M307.83,-610.82C320.18,-594.62 337,-567.67 337,-541 337,-541 337,-541 337,-278 337,-242.52 299.52,-216.52 274.63,-203.16\"/>\n",
       "<text text-anchor=\"middle\" x=\"340.5\" y=\"-405.8\" font-family=\"Times,serif\" font-size=\"14.00\">7</text>\n",
       "</g>\n",
       "<!-- 1&#45;&#45;6 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>1&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M157.89,-523.04C165.86,-509.58 176.89,-489.59 184,-471 220.49,-375.54 242.86,-254.2 250.26,-210.04\"/>\n",
       "<text text-anchor=\"middle\" x=\"229\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">11</text>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>7</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"124\" cy=\"-105\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"124\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">7</text>\n",
       "</g>\n",
       "<!-- 1&#45;&#45;7 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>1&#45;&#45;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M123.95,-531.64C92.67,-520.4 42,-495.75 42,-454 42,-454 42,-454 42,-191 42,-172.55 82.54,-138.02 106.61,-119.15\"/>\n",
       "<text text-anchor=\"middle\" x=\"49\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">20</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"148\" cy=\"-453\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"148\" y=\"-449.3\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "<!-- 1&#45;&#45;2 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>1&#45;&#45;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M148,-521.8C148,-507.05 148,-485.92 148,-471.18\"/>\n",
       "<text text-anchor=\"middle\" x=\"151.5\" y=\"-492.8\" font-family=\"Times,serif\" font-size=\"14.00\">9</text>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"81\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"81\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">8</text>\n",
       "</g>\n",
       "<!-- 1&#45;&#45;8 -->\n",
       "<g id=\"edge19\" class=\"edge\">\n",
       "<title>1&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M121.54,-535.88C78.97,-529.22 0,-509.41 0,-454 0,-454 0,-454 0,-104 0,-69.35 35.72,-43.23 59.72,-29.6\"/>\n",
       "<text text-anchor=\"middle\" x=\"7\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">10</text>\n",
       "</g>\n",
       "<!-- 6&#45;&#45;7 -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>6&#45;&#45;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M242.86,-175.24C235.21,-164.4 223.85,-150.32 211,-141 192.15,-127.33 167.21,-118.02 148.87,-112.45\"/>\n",
       "<text text-anchor=\"middle\" x=\"237.5\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\">100</text>\n",
       "</g>\n",
       "<!-- 7&#45;&#45;7 -->\n",
       "<g id=\"edge18\" class=\"edge\">\n",
       "<title>7&#45;&#45;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M148.53,-112.75C159.51,-113.49 169,-110.91 169,-105 169,-99.09 159.51,-96.51 148.53,-97.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"172.5\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">0</text>\n",
       "</g>\n",
       "<!-- 7&#45;&#45;8 -->\n",
       "<g id=\"edge17\" class=\"edge\">\n",
       "<title>7&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M115.71,-87.61C108.09,-72.56 96.87,-50.37 89.27,-35.34\"/>\n",
       "<text text-anchor=\"middle\" x=\"109.5\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>3</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"97\" cy=\"-366\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"97\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 2&#45;&#45;3 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2&#45;&#45;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M138.41,-436.01C129.29,-420.82 115.65,-398.09 106.55,-382.92\"/>\n",
       "<text text-anchor=\"middle\" x=\"129.5\" y=\"-405.8\" font-family=\"Times,serif\" font-size=\"14.00\">6</text>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>4</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"163\" cy=\"-279\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"163\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">4</text>\n",
       "</g>\n",
       "<!-- 2&#45;&#45;4 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>2&#45;&#45;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M149.49,-434.88C152.37,-401.91 158.64,-329.97 161.51,-297.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"160.5\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "<!-- 3&#45;&#45;4 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>3&#45;&#45;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M107.28,-349.35C114.03,-339.33 123.21,-326.15 132,-315 137.43,-308.12 143.79,-300.81 149.34,-294.67\"/>\n",
       "<text text-anchor=\"middle\" x=\"139\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">10</text>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>5</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"97\" cy=\"-192\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"97\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">5</text>\n",
       "</g>\n",
       "<!-- 3&#45;&#45;5 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>3&#45;&#45;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M97,-347.88C97,-314.91 97,-242.97 97,-210.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"107.5\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">100</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;0 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>4&#45;&#45;0</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M180.55,-292.83C196.18,-305.21 218.46,-325.36 231,-348 280.55,-437.46 291.81,-563.48 294.31,-608.87\"/>\n",
       "<text text-anchor=\"middle\" x=\"283\" y=\"-449.3\" font-family=\"Times,serif\" font-size=\"14.00\">16</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;6 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>4&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M181.14,-265.49C189.88,-259.14 200.33,-251.07 209,-243 220.68,-232.13 232.55,-218.45 241.02,-208.15\"/>\n",
       "<text text-anchor=\"middle\" x=\"227.5\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\">8</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;7 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>4&#45;&#45;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M159.12,-260.88C151.64,-227.91 135.33,-155.97 127.87,-123.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"151.5\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;5 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>4&#45;&#45;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M150.11,-262.81C145.02,-256.72 139.16,-249.58 134,-243 125.08,-231.61 115.36,-218.44 108.12,-208.48\"/>\n",
       "<text text-anchor=\"middle\" x=\"141\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\">15</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;8 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>4&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M170.84,-261.72C186.24,-227.18 216.37,-144.98 185,-87 168.06,-55.69 129.76,-36.49 104.66,-26.8\"/>\n",
       "<text text-anchor=\"middle\" x=\"202.5\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\">5</text>\n",
       "</g>\n",
       "<!-- 5&#45;&#45;8 -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>5&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M89.77,-174.62C84.21,-161.08 76.99,-141.2 74,-123 69.01,-92.64 73.73,-56.74 77.47,-36.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"81\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">12</text>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"234\" cy=\"-540\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"234\" y=\"-536.3\" font-family=\"Times,serif\" font-size=\"14.00\">9</text>\n",
       "</g>\n",
       "<!-- 9&#45;&#45;6 -->\n",
       "<g id=\"edge21\" class=\"edge\">\n",
       "<title>9&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M239.2,-522.33C253.05,-475.55 288.41,-339.16 267,-228 265.79,-221.7 263.45,-215.1 261.03,-209.34\"/>\n",
       "<text text-anchor=\"middle\" x=\"275.5\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">5</text>\n",
       "</g>\n",
       "<!-- 9&#45;&#45;2 -->\n",
       "<g id=\"edge20\" class=\"edge\">\n",
       "<title>9&#45;&#45;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M219.41,-524.58C203.6,-508.95 178.5,-484.15 162.66,-468.49\"/>\n",
       "<text text-anchor=\"middle\" x=\"200.5\" y=\"-492.8\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Graph at 0x105827ee0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# visual representation\n",
    "v = g.draw()\n",
    "v"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7d67f19",
   "metadata": {},
   "source": [
    "# Bor≈Øvka's algorithm\n",
    "Using separate data structure for simplicity, will translate back to a Graph structure to display the resulting MST\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3eae4398",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*********************************************\n",
      "Added  0  to  1  connection.\n",
      "Added  9  to  6  connection.\n",
      "Added  7  to  8  connection.\n",
      "Added  9  to  2  connection.\n",
      "Added  2  to  3  connection.\n",
      "Added  2  to  4  connection.\n",
      "Added  5  to  8  connection.\n",
      "End of iteration. Number of subgraphs:  3 \n",
      " ********************************************* \n",
      "\n",
      "\n",
      "Added  0  to  6  connection.\n",
      "Added  4  to  7  connection.\n",
      "End of iteration. Number of subgraphs:  1 \n",
      " ********************************************* \n",
      "\n",
      "\n",
      "*********************************************\n",
      "Finished with a single graph. Total weight:  44\n",
      "*********************************************\n"
     ]
    }
   ],
   "source": [
    "class Boruvka(object):\n",
    "    def __init__(self, graph):\n",
    "        self.nodes = graph.get_nodes()\n",
    "        self.edges = graph.get_edges()\n",
    "        self.MST = Graph([])\n",
    "        self.total_weight = 0\n",
    "        # keep track of which subtree does each graph belong to\n",
    "        self.subgraphs = {}\n",
    "        \n",
    "    def find_root(self, n):\n",
    "        if n == self.subgraphs[n]:\n",
    "            return n\n",
    "        else:\n",
    "            return self.find_root(self.subgraphs[n])\n",
    "            \n",
    "    \n",
    "    # merges two disconnected sets into one\n",
    "    def merge(self, subgraph_sizes, n1, n2):\n",
    "        r1 = self.find_root(n1)\n",
    "        r2 = self.find_root(n2)\n",
    "        \n",
    "        if (subgraph_sizes[r1] < subgraph_sizes[r2]):\n",
    "            self.subgraphs[r1] = r2\n",
    "\n",
    "        elif (subgraph_sizes[r1] > subgraph_sizes[r2]):\n",
    "            self.subgraphs[r2] = r1\n",
    "            \n",
    "        else:\n",
    "            self.subgraphs[r2] = r1\n",
    "            subgraph_sizes[r1] += 1\n",
    "\n",
    "            \n",
    "    \n",
    "    def get_boruvka(self):\n",
    "        print('*' * 45)            \n",
    "        # initially, number of subgraphs is equal to the number of all nodes\n",
    "        num_subgraphs = len(self.nodes)\n",
    "        # size of all subgraphs is equal to 1\n",
    "        size_subgraphs = {}\n",
    "        # cheapest edge for each component - initially -1 for every node\n",
    "        cheapest = {}\n",
    "        \n",
    "        # initiate the variables\n",
    "        for node in self.nodes:\n",
    "            self.subgraphs[node] = node\n",
    "            cheapest[node] = -1\n",
    "            size_subgraphs[node] = 1\n",
    "        \n",
    "        # while more than 1 subgraph\n",
    "        while num_subgraphs > 1:\n",
    "            \n",
    "            # traversing through each edge, find the shortest connection between subtrees\n",
    "            for uv in self.edges:\n",
    "                # for each edge uv\n",
    "                # u - node 1, v - node 2\n",
    "                # w - weight of the edge\n",
    "                u = uv[0]\n",
    "                v = uv[1]\n",
    "                w = uv[2]\n",
    "                \n",
    "                # find the root of both subgraphs\n",
    "                u_subgraph = self.find_root(u)\n",
    "                v_subgraph = self.find_root(v)\n",
    "                \n",
    "                # are u and v in different subgraphs?\n",
    "                if(u_subgraph != v_subgraph):\n",
    "                    \n",
    "                    # ux - the cheapest edge for the component of u\n",
    "                    ux = cheapest[u_subgraph]\n",
    "                    # vx - the cheapest edge for the component of v\n",
    "                    vx = cheapest[v_subgraph]\n",
    "                    \n",
    "                    # check if processed edge is is the cheapest for u subgraph to connect to another subgraph\n",
    "                    # pick edge uv if ux is undefined, ux weight is more or equal to uv\n",
    "                    if(ux == -1 or ux[2] > w or ux[2] == w):\n",
    "                        cheapest[u_subgraph] = uv\n",
    "                    else:\n",
    "                        self.edges\n",
    "\n",
    "                    # check if processed edge is is the cheapest for v subgraph to connect to another subgraph\n",
    "                    # pick edge uv if vx is undefined, vx weight is more or equal to uv\n",
    "                    if(vx == -1 or vx[2] > w or vx[2] == w):\n",
    "                        cheapest[v_subgraph] = uv\n",
    "                    \n",
    "            # for each node which has the cheapest edge set, add the edge to the MST graph\n",
    "            for node in self.nodes:\n",
    "                if(cheapest[node] != -1):\n",
    "                    u = cheapest[node][0]\n",
    "                    v = cheapest[node][1]\n",
    "                    w = cheapest[node][2]\n",
    "                    \n",
    "                    # find v subgraph root\n",
    "                    vs = self.find_root(v)\n",
    "                    # find u subgraph root\n",
    "                    us = self.find_root(u)\n",
    "                    \n",
    "                    # if u and v are in different subgraphs, add the connection\n",
    "                    if(us != vs):\n",
    "                        self.total_weight += w\n",
    "                        self.merge(size_subgraphs, u, v)\n",
    "                        # add it to the visual representation of the MST Graph as well\n",
    "                        self.MST.add_edge(u, v, w)\n",
    "                        print(\"Added \", u, \" to \", v, \" connection.\")\n",
    "                        # connected two subgraphs - one less subgraph\n",
    "                        num_subgraphs -= 1\n",
    "                    \n",
    "            \n",
    "            print(\"End of iteration. Number of subgraphs: \", num_subgraphs, '\\n', '*' * 45, \"\\n\\n\")\n",
    "            \n",
    "            # reset cheapest, find it again for newly formed subtrees\n",
    "            for node in self.nodes:\n",
    "                cheapest[node] = -1\n",
    "                \n",
    "                \n",
    "        print('*' * 45)            \n",
    "        print(\"Finished with a single graph. Total weight: \", self.total_weight)\n",
    "        print('*' * 45)            \n",
    "        \n",
    "        return self.MST\n",
    "\n",
    "    \n",
    "    \n",
    "boruvka = Boruvka(g)\n",
    "MST = boruvka.get_boruvka()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5389ae78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 3.0.0 (20220226.1711)\n",
       " -->\n",
       "<!-- Title: graph Pages: 1 -->\n",
       "<svg width=\"324pt\" height=\"392pt\"\n",
       " viewBox=\"0.00 0.00 324.00 392.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 388)\">\n",
       "<title>graph</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-388 320,-388 320,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"45\" cy=\"-366\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"45\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">0</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"27\" cy=\"-279\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"27\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">1</text>\n",
       "</g>\n",
       "<!-- 0&#45;&#45;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&#45;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M39.17,-348.42C37.31,-342.65 35.37,-336.09 34,-330 31.57,-319.23 29.84,-306.95 28.7,-297.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"37.5\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">4</text>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>6</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"99\" cy=\"-279\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"99\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">6</text>\n",
       "</g>\n",
       "<!-- 0&#45;&#45;6 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>0&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M55.16,-349.01C64.81,-333.82 79.25,-311.09 88.89,-295.92\"/>\n",
       "<text text-anchor=\"middle\" x=\"79.5\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">7</text>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>9</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"133\" cy=\"-366\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"133\" y=\"-362.3\" font-family=\"Times,serif\" font-size=\"14.00\">9</text>\n",
       "</g>\n",
       "<!-- 9&#45;&#45;6 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>9&#45;&#45;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M126.28,-348.21C120.28,-333.21 111.55,-311.37 105.59,-296.47\"/>\n",
       "<text text-anchor=\"middle\" x=\"122.5\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">5</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>2</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"171\" cy=\"-279\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"171\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "<!-- 9&#45;&#45;2 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>9&#45;&#45;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M140.33,-348.61C147.06,-333.56 156.97,-311.37 163.7,-296.34\"/>\n",
       "<text text-anchor=\"middle\" x=\"158.5\" y=\"-318.8\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>7</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"217\" cy=\"-105\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"217\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">7</text>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>8</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"263\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"263\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">8</text>\n",
       "</g>\n",
       "<!-- 7&#45;&#45;8 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>7&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M225.87,-87.61C234.07,-72.46 246.18,-50.09 254.31,-35.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"245.5\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>3</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"145\" cy=\"-192\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"145\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 2&#45;&#45;3 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2&#45;&#45;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M165.86,-261.21C161.31,-246.31 154.68,-224.65 150.13,-209.76\"/>\n",
       "<text text-anchor=\"middle\" x=\"163.5\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\">6</text>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>4</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"217\" cy=\"-192\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"217\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">4</text>\n",
       "</g>\n",
       "<!-- 2&#45;&#45;4 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2&#45;&#45;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M179.87,-261.61C188.07,-246.46 200.18,-224.09 208.31,-209.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"199.5\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\">2</text>\n",
       "</g>\n",
       "<!-- 4&#45;&#45;7 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>4&#45;&#45;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M217,-173.8C217,-159.05 217,-137.92 217,-123.18\"/>\n",
       "<text text-anchor=\"middle\" x=\"220.5\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\">3</text>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>5</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"289\" cy=\"-105\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"289\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">5</text>\n",
       "</g>\n",
       "<!-- 5&#45;&#45;8 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>5&#45;&#45;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M283.86,-87.21C279.31,-72.31 272.68,-50.65 268.13,-35.76\"/>\n",
       "<text text-anchor=\"middle\" x=\"284\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\">12</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Graph at 0x105872580>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = MST.draw()\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "113bd3bb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
